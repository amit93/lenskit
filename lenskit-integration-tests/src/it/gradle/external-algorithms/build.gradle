buildscript {
    repositories {
        maven {
            url project.testRepoURI
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.grouplens.lenskit:lenskit-gradle:$project.lenskitVersion"
    }
}


import org.gradle.process.internal.ExecException
import org.lenskit.gradle.*

apply plugin: 'java'
apply plugin: 'lenskit'
apply from: 'common.gradle'
apply from: 'renjin.gradle'

dependencies {
    analyze 'org.hamcrest:hamcrest-library:1.3'
    analyze 'com.xlson.groovycsv:groovycsv:1.0'
}

task checkPythonInstall {
    description 'Checks whether the Python install is valid'
    ext.isValid = false
    ext.shouldTry = true
    if (project.hasProperty('python.skip')) {
        ext.shouldTry = project.getProperty('python.skip').toLowerCase() != 'true'
    }

    onlyIf {
        shouldTry
    }

    doLast {
        try {
            exec {
                executable 'python'
                args '-V'
            }
            logger.info 'Your Python kit seems good'
            isValid = true
        } catch (IOException e) {
            logger.warn "Cannot run Python, assuming you don't have one"
        } catch (ExecException e) {
            logger.warn "Python starts, but is not usable"
        }
        if (System.getenv("CI") == "true" && !isValid) {
            logger.error "Python is not present, but required for CI builds"
            throw new RuntimeException("cannot find Python")
        }
    }
}

task crossfold(type: Crossfold) {
    dependsOn checkPythonInstall
    onlyIf {
        checkPythonInstall.isValid
    }

    input textFile {
        file ratingsFile
        delimiter "\t"
    }
    outputFormat "PACK"
    partitionCount 5
    userPartitionMethod holdout(5)
    includeTimestamps false
}

task trainTest(type: TrainTest) {
    dependsOn checkPythonInstall
    onlyIf {
        checkPythonInstall.isValid
    }

    maxMemory '256m'
    dataSet crossfold
    cacheDirectory 'cache'
    outputFile 'results.csv'
    userOutputFile 'users.csv'
    algorithm 'algorithms.groovy'
    predict {
        outputFile 'predictions.csv'
        metric 'coverage'
        metric 'rmse'
    }
}

task checkGroovy(type: JavaExec) {
    onlyIf {
        checkPythonInstall.isValid
    }

    dependsOn trainTest
    classpath configurations.analyze

    main 'groovy.ui.GroovyMain'
    args 'verify.groovy'
}

check {
    dependsOn checkGroovy
}
